#!/bin/bash

# Copyright 2013 Benedikt Morbach <moben@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

# runs multiple MPI processes as a grid in a new tmux window and multiplexes keyboard input to all of them

mpirun_cmd=${MPIRUN:-mpirun}
reptyr_cmd=${REPTYR:-reptyr}

mpich=$(${mpirun_cmd} --version |grep -i HYDRA)
openmpi=$(${mpirun_cmd} --version |grep -i "Open MPI")

if [ -z "${mpich}" ] && [ -z "${openmpi}" ]; then
    echo "Unknown MPI implementation. Only MPICH (and its derivatives) and OpenMPI are supported!"
    exit 1
fi

usage() {
    echo 'tmpi: Run multiple MPI processes as a grid in a new tmux window and multiplex keyboard input to all of them.'
    echo ''
    echo 'Usage:'
    echo '   tmpi [number] [command]'
    echo ''
    echo 'You need to pass at least two arguments.'
    echo 'The first argument is the number of processes to use, every argument after that is the commandline to run.'
    echo 'If you call this script from outside tmux and your command contains important whitespace then you need to appy two levels of quoting to preserve it.'
    echo ''
    echo 'The new window is set to remain on exit and has to be closed manually. ("C-b + &" by default)'
    echo 'You can use the environment variable TMPI_TMUX_OPTIONS to pass options to the `tmux` invocation, '
    echo '  such as '-f ~/.tmux.conf.tmpi' to use a special tmux configuration for tmpi.'
    echo 'Little usage hint: By default the panes in the window are synchronized. If you wish to work only with one thread maximize this pane ("C-b + z" by default) and work away on one thread. Return to all thread using the same shortcut.'
}

check_tools() {
    # reptyr must be last in the following list
    tools=( tmux $mpirun_cmd $reptyr_cmd )

    for tool in "${tools[@]}"; do
        if !(type ${tool} > /dev/null 2>&1); then
            if [ "${tool}" = "${reptyr_cmd}" ]; then
                echo "reptyr not found, using tmpi legacy mode"
                return 1
            else
                echo "You need to install ${tool} to run this script."
                exit 1
            fi
        fi
    done
    return 0
}

if [[ ${#} -lt 2 ]]; then
    usage

    exit 1
fi

if [[ -z ${TMUX+x} ]]; then
    # it seems we aren't in a tmux session.
    # start a new one so that our window doesn't end up in some other session and we have to search it.
    # actually start a new server with '-L' to ensure that our environment carries over.
    socket=$(mktemp --dry-run tmpi.XXXX)
    exec tmux ${TMPI_TMUX_OPTIONS} -L ${socket} new-session "${0} ${*}"
fi

if [[ ${1} == runmpi ]] ; then
    # we are being started as one of many processes by mpirun.
    has_repytr=${2}
    if [ ${has_repytr} = 0 ]; then
        processes=${3}
        setpty_cmd=${4}
        shift
        shift
    fi
    shift
    shift

    mpi_rank=${OMPI_COMM_WORLD_RANK:-${PMI_RANK:--1}}
    if [[ $mpi_rank == -1 ]]; then
        echo "Neither OMPI_COMM_WORLD_RANK nor PMI_RANK environment variables is not set by '$mpirun_cmd'."
        exit 1
    fi

    # start the processes in the order of their rank.
    # this avoids races, as we have to push the variables in tmux' environment.
    # it has the nice side-effect that the panes are also ordered by rank.
    while [[ $(cat /tmp/tmpi.lock) -ne ${mpi_rank} ]] ; do
        sleep 0.02
    done

    if [ ${has_repytr} = 0 ]; then
        # temp file for forwarding /dev/pts/xxx of 'reptyr' to host
        ptsfile=$(mktemp)
        touch $ptsfile
        trap "rm -f $ptsfile" EXIT

        # split the tmux pane and run 'reptyr -l' on it
        pane=$(tmux split-window -P -F '#{pane_id}' -t $window bash -c "trap \"rm -f $ptsfile\" EXIT; $reptyr_cmd -l | tee $ptsfile")
    else
        if [ -n "${mpich}" ]; then
            mpi_env="-e MPI -e HYD -e PMI"
        else
            mpi_env="-e MPI -e OPAL -e PMIX"
        fi
        # get all the variables that mpirun starts us with so that we can pass them through.
        mpi_vars=( $( env | grep ${mpi_env} | cut -d '=' -f1 ) )
        mpi_vars+=( "${additional_vars[@]}" )

        # add the variables to tmux' session environment.
        # we can't just export them because the process will be started as a child of tmux, not us.
        for var in "${mpi_vars[@]}"; do
            tmux set-environment -t ${session} "${var}" "${!var}"
        done

        x=( $(tmux split-window -P -F '#{pane_pid} #{pane_id}' -t ${window} "${*}") )
        pid=${x[0]}
        pane=${x[1]}

        for var in "${mpi_vars[@]}"; do
            tmux set-environment -t ${session} -u "${var}"
        done
    fi

    # kill the dummy pane that opened the new window
    [[ ${mpi_rank} -eq 0 ]] && tmux kill-pane -t ${dummy} &> /dev/null

    # set the window to tiled mode.
    # have to do this after every new pane is spawned because otherwise the splits get
    # smaller and smaller until tmux refuses to open new panes, despite plenty of space being left.
    tmux select-layout -t ${pane} tiled &> /dev/null

    # let the next process start
    echo $((mpi_rank+1)) > /tmp/tmpi.lock

    if [ ${has_repytr} = 0 ]; then
        # Put quotes correctly in the command
        cmds=()
        for i in "$@"; do
            if [[ $i =~ [[:space:]] ]]; then
                i=\"$i\"
            fi
            cmds+=("$i")
        done
        commands="(echo; "${cmds[@]}")"

        # Barrier
        while [[ $(cat /tmp/tmpi.lock) -ne $((processes+mpi_rank)) ]] ; do
            sleep 0.02
        done
        echo $((processes+mpi_rank+1)) > /tmp/tmpi.lock

        # '--follow=name' rather than '-f' to exit when the file is deleted
        tail --follow=name $ptsfile |
            head -1 |
            stdbuf -oL grep 'Opened a new pty:' |
            stdbuf -oL cut -d ' ' -f 5 |
            xargs -I DEVPTS setsid $setpty_cmd DEVPTS bash -c "$commands"
    else
        # don't exit here as mpirun needs to be kept alive and it would also exit.
        while [[ -d /proc/${pid} ]]; do
            sleep 1
        done
    fi
else
    # check if we have the required tools necessary
    check_tools
    has_reptyr=$?

    # we are the parent and set everything up before we start ourselves a bunch of times via mpirun.
    processes=${1}
    self=${0}
    shift

    if [ "${has_reptyr}" = 0 ]; then
        # Compile a program to call 'ioctl' syscall
        setpty_cmd=$(mktemp)
        gcc -o $setpty_cmd -x c - <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/ioctl.h>

int main(int argc, char **argv) {
  if (argc < 3) {
    fprintf(stderr, "Usage: %s /dev/pts/XX COMMANDS\n", argv[0]);
    exit(1);
}

  int fd = open(argv[1], O_RDWR);
  if (fd == -1) {
    perror("open");
    exit(1);
}

  if (ioctl(fd, TIOCSCTTY, 0) != 0) {
    perror("ioctl");
    exit(1);
}

  dup2(fd, STDIN_FILENO);
  dup2(fd, STDOUT_FILENO);
  dup2(fd, STDERR_FILENO);

  argv += 2;
  execvp(argv[0], argv);
  return 0;
}
EOF
        trap "rm -f $setpty_cmd" EXIT
    fi

    # create an empty new dummy window which we sill later split up for the mpi processes.
    x=( $(tmux new-window -P -F '#{pane_id} #{window_id} #{session_id}') )
    export dummy=${x[0]}
    export window=${x[1]}
    export session=${x[2]}

    # syncronize input to all panes.
    tmux set-window-option -t ${window} synchronize-panes on &> /dev/null
    tmux set-window-option -t ${window} remain-on-exit on &> /dev/null

    # always start with rank 0.
    echo 0 > /tmp/tmpi.lock

    if [ ${has_reptyr} = 0 ]; then
        # re-execute ourself to spawn of the processes.
        echo $mpirun_cmd -n ${processes} ${self} runmpi ${has_reptyr} $processes $setpty_cmd "${@}"
        $mpirun_cmd -oversubscribe -n ${processes} ${self} runmpi ${has_reptyr} $processes $setpty_cmd "${@}"
    else
        pmi_arg=""
        if [ -n "${mpich}" ]; then
            pmi_arg="-pmi-port"
        fi

        # re-execute ourself to spawn of the processes.
        echo mpirun --oversubscribe -np ${processes} ${pmi_arg} ${self} runmpi ${has_reptyr} "${@}"
        mpirun --oversubscribe -np ${processes} ${pmi_arg} ${self} runmpi ${has_reptyr} "${@}"
    fi
fi
